// Code generated by protoc-gen-go. DO NOT EDIT.
// source: router.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Id struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=UniqueId,proto3" json:"UniqueId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

type Pass struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=UniqueId,proto3" json:"UniqueId,omitempty"`
	UniquePass           string   `protobuf:"bytes,2,opt,name=UniquePass,proto3" json:"UniquePass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pass) Reset()         { *m = Pass{} }
func (m *Pass) String() string { return proto.CompactTextString(m) }
func (*Pass) ProtoMessage()    {}
func (*Pass) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{1}
}

func (m *Pass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pass.Unmarshal(m, b)
}
func (m *Pass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pass.Marshal(b, m, deterministic)
}
func (m *Pass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pass.Merge(m, src)
}
func (m *Pass) XXX_Size() int {
	return xxx_messageInfo_Pass.Size(m)
}
func (m *Pass) XXX_DiscardUnknown() {
	xxx_messageInfo_Pass.DiscardUnknown(m)
}

var xxx_messageInfo_Pass proto.InternalMessageInfo

func (m *Pass) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *Pass) GetUniquePass() string {
	if m != nil {
		return m.UniquePass
	}
	return ""
}

type Point struct {
	Lon                  int32    `protobuf:"varint,1,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat                  int32    `protobuf:"varint,2,opt,name=lat,proto3" json:"lat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{2}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLon() int32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Point) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

type File struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=UniqueId,proto3" json:"UniqueId,omitempty"`
	RequestedPoint       *Point   `protobuf:"bytes,2,opt,name=RequestedPoint,proto3" json:"RequestedPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{3}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *File) GetRequestedPoint() *Point {
	if m != nil {
		return m.RequestedPoint
	}
	return nil
}

type Status struct {
	Requester            *Pass    `protobuf:"bytes,1,opt,name=Requester,proto3" json:"Requester,omitempty"`
	Status               bool     `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{4}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetRequester() *Pass {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Media struct {
	Profile              *Pass    `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Media) Reset()         { *m = Media{} }
func (m *Media) String() string { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()    {}
func (*Media) Descriptor() ([]byte, []int) {
	return fileDescriptor_367072455c71aedc, []int{5}
}

func (m *Media) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Media.Unmarshal(m, b)
}
func (m *Media) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Media.Marshal(b, m, deterministic)
}
func (m *Media) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Media.Merge(m, src)
}
func (m *Media) XXX_Size() int {
	return xxx_messageInfo_Media.Size(m)
}
func (m *Media) XXX_DiscardUnknown() {
	xxx_messageInfo_Media.DiscardUnknown(m)
}

var xxx_messageInfo_Media proto.InternalMessageInfo

func (m *Media) GetProfile() *Pass {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Media) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "proto.Id")
	proto.RegisterType((*Pass)(nil), "proto.Pass")
	proto.RegisterType((*Point)(nil), "proto.Point")
	proto.RegisterType((*File)(nil), "proto.File")
	proto.RegisterType((*Status)(nil), "proto.Status")
	proto.RegisterType((*Media)(nil), "proto.Media")
}

func init() { proto.RegisterFile("router.proto", fileDescriptor_367072455c71aedc) }

var fileDescriptor_367072455c71aedc = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0x5f, 0x4b, 0x02, 0x41,
	0x10, 0x67, 0xcd, 0x33, 0x6f, 0xb4, 0x88, 0x79, 0x08, 0xb9, 0x87, 0x90, 0xa3, 0xc4, 0x08, 0x44,
	0xac, 0x4f, 0x20, 0x15, 0x48, 0x44, 0xb2, 0x25, 0xf4, 0xba, 0xb6, 0x5b, 0x2d, 0x1c, 0xbb, 0xba,
	0xbb, 0x47, 0x7e, 0xad, 0xbe, 0x61, 0xdc, 0x78, 0x67, 0x1a, 0xe1, 0xd3, 0xce, 0xfc, 0xfe, 0x2d,
	0xf3, 0x83, 0xb6, 0xb3, 0x79, 0x50, 0x6e, 0xb0, 0x70, 0x36, 0x58, 0x8c, 0xe8, 0x49, 0xbb, 0x50,
	0x9b, 0x48, 0x4c, 0xa0, 0x39, 0x33, 0x7a, 0x99, 0xab, 0x89, 0xec, 0xb0, 0x2e, 0xeb, 0xc7, 0x7c,
	0xb3, 0xa7, 0x63, 0xa8, 0x4f, 0x85, 0xf7, 0xfb, 0x34, 0x78, 0x06, 0xb0, 0x9e, 0x0b, 0x65, 0xa7,
	0x46, 0xec, 0x16, 0x92, 0x5e, 0x41, 0x34, 0xb5, 0xda, 0x04, 0x3c, 0x81, 0x83, 0xcc, 0x1a, 0xf2,
	0x47, 0xbc, 0x18, 0x09, 0x11, 0x81, 0x3c, 0x05, 0x22, 0x42, 0xfa, 0x0a, 0xf5, 0x7b, 0x9d, 0xa9,
	0xbd, 0x1f, 0xde, 0xc0, 0x31, 0x57, 0xcb, 0x5c, 0xf9, 0xa0, 0x24, 0x25, 0x53, 0x40, 0x6b, 0xd4,
	0x5e, 0x5f, 0x37, 0x20, 0x8c, 0xff, 0xd1, 0xa4, 0x0f, 0xd0, 0x78, 0x0e, 0x22, 0xe4, 0x1e, 0x2f,
	0x21, 0xae, 0x38, 0x47, 0xe1, 0xad, 0x51, 0xab, 0xb2, 0x0a, 0xef, 0xf9, 0x2f, 0x8b, 0xa7, 0x95,
	0x89, 0xbe, 0x68, 0xf2, 0x72, 0x4b, 0xc7, 0x10, 0x3d, 0x2a, 0xa9, 0x05, 0x5e, 0xc0, 0xe1, 0xd4,
	0xd9, 0x77, 0x9d, 0xa9, 0xff, 0x92, 0x2a, 0x0e, 0x11, 0xea, 0x2f, 0x6a, 0x15, 0xca, 0x76, 0x68,
	0x1e, 0x7d, 0x33, 0x88, 0xed, 0x42, 0x39, 0x11, 0xb4, 0x35, 0x78, 0x0e, 0xf0, 0x34, 0x0f, 0x42,
	0x1b, 0xea, 0x3b, 0x2e, 0x53, 0x26, 0x32, 0xd9, 0x0e, 0xc4, 0x1e, 0x34, 0x6f, 0xed, 0x97, 0xc9,
	0xac, 0x90, 0xb8, 0x4d, 0x6c, 0x54, 0x45, 0x79, 0x43, 0x86, 0x3d, 0x68, 0xcc, 0x16, 0x3b, 0xaa,
	0x82, 0x48, 0x8e, 0xca, 0x65, 0x7d, 0x45, 0x9f, 0xe1, 0x00, 0xda, 0x74, 0xc7, 0xdd, 0xea, 0xed,
	0x53, 0x7c, 0x28, 0xac, 0x2a, 0x24, 0x30, 0xd9, 0xd9, 0xfa, 0x6c, 0xc8, 0xe6, 0x0d, 0x02, 0xae,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xe3, 0xa3, 0x6e, 0x4f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperationClient is the client API for Operation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperationClient interface {
	ObtainPass(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Pass, error)
	Download(ctx context.Context, in *Pass, opts ...grpc.CallOption) (Operation_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Operation_UploadClient, error)
	MediaExchage(ctx context.Context, opts ...grpc.CallOption) (Operation_MediaExchageClient, error)
}

type operationClient struct {
	cc *grpc.ClientConn
}

func NewOperationClient(cc *grpc.ClientConn) OperationClient {
	return &operationClient{cc}
}

func (c *operationClient) ObtainPass(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Pass, error) {
	out := new(Pass)
	err := c.cc.Invoke(ctx, "/proto.operation/ObtainPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationClient) Download(ctx context.Context, in *Pass, opts ...grpc.CallOption) (Operation_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Operation_serviceDesc.Streams[0], "/proto.operation/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Operation_DownloadClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type operationDownloadClient struct {
	grpc.ClientStream
}

func (x *operationDownloadClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Operation_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Operation_serviceDesc.Streams[1], "/proto.operation/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationUploadClient{stream}
	return x, nil
}

type Operation_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type operationUploadClient struct {
	grpc.ClientStream
}

func (x *operationUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationUploadClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationClient) MediaExchage(ctx context.Context, opts ...grpc.CallOption) (Operation_MediaExchageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Operation_serviceDesc.Streams[2], "/proto.operation/MediaExchage", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationMediaExchageClient{stream}
	return x, nil
}

type Operation_MediaExchageClient interface {
	Send(*Media) error
	Recv() (*Media, error)
	grpc.ClientStream
}

type operationMediaExchageClient struct {
	grpc.ClientStream
}

func (x *operationMediaExchageClient) Send(m *Media) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationMediaExchageClient) Recv() (*Media, error) {
	m := new(Media)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperationServer is the server API for Operation service.
type OperationServer interface {
	ObtainPass(context.Context, *Id) (*Pass, error)
	Download(*Pass, Operation_DownloadServer) error
	Upload(Operation_UploadServer) error
	MediaExchage(Operation_MediaExchageServer) error
}

// UnimplementedOperationServer can be embedded to have forward compatible implementations.
type UnimplementedOperationServer struct {
}

func (*UnimplementedOperationServer) ObtainPass(ctx context.Context, req *Id) (*Pass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainPass not implemented")
}
func (*UnimplementedOperationServer) Download(req *Pass, srv Operation_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedOperationServer) Upload(srv Operation_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedOperationServer) MediaExchage(srv Operation_MediaExchageServer) error {
	return status.Errorf(codes.Unimplemented, "method MediaExchage not implemented")
}

func RegisterOperationServer(s *grpc.Server, srv OperationServer) {
	s.RegisterService(&_Operation_serviceDesc, srv)
}

func _Operation_ObtainPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServer).ObtainPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.operation/ObtainPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServer).ObtainPass(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operation_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pass)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationServer).Download(m, &operationDownloadServer{stream})
}

type Operation_DownloadServer interface {
	Send(*File) error
	grpc.ServerStream
}

type operationDownloadServer struct {
	grpc.ServerStream
}

func (x *operationDownloadServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _Operation_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServer).Upload(&operationUploadServer{stream})
}

type Operation_UploadServer interface {
	SendAndClose(*Status) error
	Recv() (*File, error)
	grpc.ServerStream
}

type operationUploadServer struct {
	grpc.ServerStream
}

func (x *operationUploadServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Operation_MediaExchage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServer).MediaExchage(&operationMediaExchageServer{stream})
}

type Operation_MediaExchageServer interface {
	Send(*Media) error
	Recv() (*Media, error)
	grpc.ServerStream
}

type operationMediaExchageServer struct {
	grpc.ServerStream
}

func (x *operationMediaExchageServer) Send(m *Media) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationMediaExchageServer) Recv() (*Media, error) {
	m := new(Media)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Operation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.operation",
	HandlerType: (*OperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObtainPass",
			Handler:    _Operation_ObtainPass_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Operation_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _Operation_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MediaExchage",
			Handler:       _Operation_MediaExchage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "router.proto",
}
